package com.joklek.fakec.generator;

import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProject;

import java.io.*;
import java.util.Arrays;
import java.util.List;

/**
 * Generates AST nodes
 */
@Mojo(name = "generateAST", defaultPhase = LifecyclePhase.GENERATE_SOURCES)
public class SourceGeneratorMojo extends AbstractMojo {

    @Parameter(required = true, defaultValue = "${project.basedir}/src/main/resources/ASTResources")
    private String sourceDirectory;

    @Parameter(required = true, defaultValue = "${project.build.directory}/generated-sources/java")
    private String targetDirectory;

    @Parameter
    private List<String> resourceFiles;

    @Parameter(defaultValue = "${project}")
    private MavenProject project;

    public void execute()
    {
        getLog().info( sourceDirectory + "/" + resourceFiles.get(0) + ".txt");
        if (resourceFiles.isEmpty()) {
            System.err.println("No resource files given");
            System.exit(1);
        }
        String outputDir = targetDirectory + "/com/joklek/fakec/parsing/ast";
        List<String> readFile = null;

        String fileName = resourceFiles.get(0) + ".txt";
        try {
            readFile = Arrays.asList(readFile(new File(sourceDirectory, fileName)).split("\n"));
        } catch (IOException e) {
            System.err.println(String.format("File %s, could not be found", fileName));
            e.printStackTrace();
            System.exit(1);
        }
        try {
            defineAst(outputDir, resourceFiles.get(0), readFile);
        } catch (IOException e) {
            System.err.println(String.format("File %s.java, could not be created", fileName));
            e.printStackTrace();
            System.exit(1);
        }

        project.addCompileSourceRoot(targetDirectory);
    }

    private String readFile(File file) throws IOException {
        try(BufferedReader br = new BufferedReader(new FileReader(file))) {
            StringBuilder sb = new StringBuilder();
            String line = br.readLine();

            while (line != null) {
                sb.append(line);
                sb.append(System.lineSeparator());
                line = br.readLine();
            }
            return sb.toString();
        }
    }

    private void defineAst(String outputDir, String baseName, List<String> types) throws IOException {
        File file = new File(outputDir, baseName + ".java");
        if(!file.exists()) {
            file.getParentFile().mkdirs();
            file.createNewFile();
        }

        PrintWriter writer = new PrintWriter(file, "UTF-8");

        writer.println("/*This code is autogenerated for FakeC language*/");
        writer.println("package com.joklek.fakec.parsing.ast;");
        writer.println();
        writer.println("import java.util.List;");
        writer.println("import com.joklek.fakec.tokens.Token;");
        writer.println();
        writer.println(String.format("abstract class %s {", baseName));

        for (String type : types) {
            String[] splitType = type.split(":");
            String className = splitType[0].trim();
            String fields = splitType[1].trim();
            writer.println();
            defineType(writer, baseName, className, fields);
        }

        writer.println("}");
        writer.close();
    }

    private void defineType(PrintWriter writer, String baseName, String className, String fieldList) {
        writer.println(String.format("  static class %s extends %s {", className, baseName));

        // Fields.
        String[] fields = fieldList.split(", ");
        writer.println();
        for (String field : fields) {
            writer.println(String.format("    final %s;", field));
        }

        writer.println();
        // Constructor.
        writer.println(String.format("    %s(%s) {", className, fieldList));
        // Store parameters in fields.
        for (String field : fields) {
            String name = field.split(" ")[1];
            writer.println(String.format("      this.%s = %s;", name, name));
        }

        writer.println("    }");
        writer.println("  }");
    }
}
