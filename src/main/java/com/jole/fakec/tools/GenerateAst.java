package com.jole.fakec.tools;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.List;

public class GenerateAst {
    public static void main(String[] args) throws IOException {
        if (args.length != 1) {
            System.err.println("Usage: generate_ast <output directory>");
            System.exit(1);
        }
        String outputDir = args[0];
        defineAst(outputDir, "Expr", Arrays.asList(
                "Binary   : Expr left, Token operator, Expr right",
                "Grouping : Expr expression",
                "Literal  : Object value",
                "Unary    : Token operator, Expr right"
        ));
    }

    private static void defineAst(String outputDir, String baseName, List<String> types) throws IOException {
        String path = outputDir + "/" + baseName + ".java";
        PrintWriter writer = new PrintWriter(path, "UTF-8");

        writer.println("/*This code is autogenerated for FakeC language*/;");
        writer.println("package com.jole.fakec.parsing.ast;");
        writer.println();
        writer.println("import java.util.List;");
        writer.println();
        writer.println(String.format("abstract class %s {", baseName));

        for (String type : types) {
            String[] splitType = type.split(":");
            String className = splitType[0].trim();
            String fields = splitType[1].trim();
            defineType(writer, baseName, className, fields);
        }

        writer.println("}");
        writer.close();
    }

    private static void defineType(PrintWriter writer, String baseName, String className, String fieldList) {
        writer.println(String.format("  static class %s extends %s {", className, baseName));

        // Constructor.
        writer.println("    " + className + "(" + fieldList + ") {");


        // Fields.
        String[] fields = fieldList.split(", ");
        writer.println();
        for (String field : fields) {
            writer.println("    final " + field + ";");
        }

        // Store parameters in fields.
        for (String field : fields) {
            String name = field.split(" ")[1];
            writer.println("      this." + name + " = " + name + ";");
        }

        writer.println("    }");



        writer.println("  }");
    }
}
