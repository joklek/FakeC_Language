digraph G{

node [shape = doublecircle]; OUT;
node [shape = oval];
    
MAIN -> OUT[label = "\\n, \\r, \\t, \" \""];
    
MAIN ->L_PAREN[label = "("];
    L_PAREN -> OUT;

MAIN ->R_PAREN[label = ")"];
    R_PAREN -> OUT;

MAIN ->L_CURLY[label = "{"];
    L_CURLY -> OUT;

MAIN ->R_CURLY[label = "}"];
    R_CURLY -> OUT;
    
MAIN ->L_BRACE[label = "["];
    L_BRACE -> OUT;

MAIN ->R_BRACE[label = "]"];
    R_BRACE -> OUT;

MAIN ->COMMA[label = ","];
    COMMA -> OUT;

MAIN ->SEMI_CLN[label = ";"];
    SEMI_CLN -> OUT;
    
MAIN ->PLUS[label = "+"];
    PLUS -> OUT;
    PLUS -> PLUS_EQUAL[label = "="];
        PLUS_EQUAL -> OUT;
    
MAIN ->MINUS[label = "-"];
    MINUS -> OUT;
    MINUS -> MINUS_EQUAL[label = "="];
        MINUS_EQUAL -> OUT;
    
MAIN ->MUL[label = "*"];
    MUL -> OUT;
    MUL -> MUL_EQUAL[label = "="];
        MUL_EQUAL -> OUT;
    
MAIN ->MOD[label = "%"];
    MOD -> OUT;
    MOD -> MOD_EQUAL[label = "="];
        MOD_EQUAL -> OUT;

MAIN ->EQUAL[label = "="];
    EQUAL -> OUT;
    EQUAL -> EQUAL_EQUAL[label = "="];
        EQUAL_EQUAL -> OUT;
        
MAIN ->GREATER[label = ">"];
    GREATER -> OUT;
    GREATER -> INPUT_SIGN[label = ">"]
        INPUT_SIGN -> OUT;
    GREATER -> GREATER_EQUAL[label = "="];
        GREATER_EQUAL -> OUT;
        
MAIN ->LESS[label = "<"];
    LESS -> OUT;
    LESS -> OUTPUT_SIGN[label = "<"]
        OUTPUT_SIGN -> OUT;
    LESS -> LESS_EQUAL[label = "="];
        LESS_EQUAL-> OUT;
        
# TODO needs more work
MAIN ->SLASH[label = "/"];
    SLASH -> COMMENT[label = "/"];
        COMMENT -> COMMENT;
        COMMENT -> OUT[label = "\\n"];
    SLASH -> DIV_EQUAL[label = "="];
        DIV_EQUAL -> OUT;
    SLASH -> MULTILINE_CMT[label = "*"];
        MULTILINE_CMT -> MULTILINE_CMT;
        MULTILINE_CMT -> MULTILINE_STAR[label = "*"];
           MULTILINE_STAR -> OUT[label = "/"];
           MULTILINE_STAR -> MULTILINE_STAR[label = "*"];
           MULTILINE_STAR -> MULTILINE_CMT;
    SLASH -> OUT;

MAIN ->STRING[label = "\""];
    STRING -> STRING;
    STRING -> STRING_SPECIAL[label = "\\"];
        STRING_SPECIAL -> STRING[label = "n, r, t, \""];
        STRING_SPECIAL -> STRING_UNKNOWN_SYMB;
            STRING_UNKNOWN_SYMB -> STRING_UNKNOWN_SYMB;
            STRING_UNKNOWN_SYMB -> ERROR_UNKNOWN_STRING_SYMB[label = "\""];
                ERROR_UNKNOWN_STRING_SYMB -> OUT;
    STRING -> OUT[label = "\""];

MAIN ->CHAR_1[label = "'"];
    CHAR_1 -> CHAR_SPECIAL[label = "\\"];
        CHAR_SPECIAL -> CHAR[label = "n, r, t, '"];
        CHAR_SPECIAL -> ERROR_UNKNOWN_CHAR_SYMB;
            ERROR_UNKNOWN_CHAR_SYMB -> OUT[label = "'"];
            ERROR_UNKNOWN_CHAR_SYMB -> CHAR_TOO_LONG;
    CHAR_1 -> CHAR;
    CHAR -> CHAR_TOO_LONG;
    CHAR -> OUT[label = "'"];
    CHAR_TOO_LONG -> CHAR_TOO_LONG;
    CHAR_TOO_LONG -> ERROR_CHAR_TOO_LONG[label = "'"];
        ERROR_CHAR_TOO_LONG -> OUT;

MAIN -> FLOAT_DOT[label = "."];
    FLOAT_DOT -> FLOAT_COL[label = "isNumber()"];
    FLOAT_DOT -> TRAILING_LETTER;

MAIN -> NUMBER[label = "isNumber()"]
    NUMBER -> NUMBER[label = "isNumber()"];
    NUMBER -> FLOAT_COL[label = "."];
    NUMBER -> EXP[label = "e"];
    NUMBER -> INT;
        INT -> OUT;
        FLOAT -> OUT;
    NUMBER -> TRAILING_LETTER[label = "isAlpha()"];
        FLOAT_COL -> FLOAT_COL[label = "isNumber()"];
        FLOAT_COL -> EXP[label = "e"];
        FLOAT_COL -> TRAILING_LETTER[label = "isAlpha()"];
        FLOAT_COL -> FLOAT;
    EXP -> EXP_SIGN[label = "+, -"];
        EXP_SIGN -> EXP_NUMB[label = "isNumber()"];
        EXP_SIGN -> NO_EXP_NUMB;
    EXP -> EXP_NUMB[label = "isNumber()"];
        EXP_NUMB -> EXP_NUMB[label = "isNumber()"];
        EXP_NUMB -> TRAILING_LETTER[label = "isAlpha()"];
        EXP_NUMB -> FLOAT;
    EXP -> NO_EXP_NUMB;
        NO_EXP_NUMB -> NO_EXP_NUMB[label = "isAlphaNumeric()"];
        NO_EXP_NUMB -> ERROR_NO_EX_NUMB;
            ERROR_NO_EX_NUMB -> OUT;
    TRAILING_LETTER -> TRAILING_LETTER[label = "isAlphaNumeric()"];
    TRAILING_LETTER -> ERROR_TRAILING_LETTER;
        ERROR_TRAILING_LETTER -> OUT;

MAIN -> i_TOKEN[label = "i"];
    i_TOKEN -> IF[label = "f"]; 
        IF -> OUT;
        IF -> IDENT[label = "isAlphaNumeric()"];
    i_TOKEN -> IDENT[label = "isAlphaNumeric()"];
    i_TOKEN -> in_TOKEN[label = "n"];
        in_TOKEN -> IDENT[label = "isAlphaNumeric()"];
        in_TOKEN -> INT_TYPE[label = "t"];
            INT_TYPE -> OUT;
            INT_TYPE -> IDENT[label = "isAlphaNumeric()"];

MAIN -> IDENT[label = "isAlpha()"];
    IDENT -> IDENT[label = "isAlphaNumeric()"];
    IDENT -> OUT;


MAIN -> ERROR_UNKNOWN_SYMB[label = "other symbol"];
    ERROR_UNKNOWN_SYMB -> OUT;
}